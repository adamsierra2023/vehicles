<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>GET</http_method>
        <name>Get Vehicle (v3)</name>
        <operation_script><![CDATA[/*
API:            Vehicles
Name:           Get Vehicle
HTTP Method:    GET
Relative path:  /vehicle/{vin}
Description:    Returns data for selected vehicle.
*/

(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // Declare empty array for answer
    var answer = [];

    // Get the VIN from the path parameter. Generate 404 if not provided.
    var vin = request.pathParams.vin;
    if (!vin) {
        response.setError(new sn_ws_err.NotFoundError('VIN not provided.'));
        response.setStatus(404);
        return;
    }

    // Query the Vehicle table for this VIN.
    var vehicleTable = 'x_461903_vehicles_vehicle';
    var vehicleGr = new GlideRecord(vehicleTable);
    vehicleGr.addQuery('vin', vin);
    vehicleGr.query();

    // Generate a 404 if no vehicle was found.
    if (!vehicleGr.hasNext()) {
        response.setError(new sn_ws_err.NotFoundError('No vehicle found.'));
        response.setStatus(404);
        return;
    }

    // For the vehicle found, generate a JSON object and save the vehicle data in it.
    while (vehicleGr.next()) {

        var vehicleObj = {
            "make": vehicleGr.getValue('make'),
            "model": vehicleGr.getValue('model'),
            "year": vehicleGr.getValue('year'),
            // Or pass year as integer
            // "year": parseInt(vehicleGr.getValue('year'), 10),
            "city": vehicleGr.getValue('city'),
            "country": vehicleGr.getValue('country')
        };
        answer.push(vehicleObj);
    }

    // Generate the response body.
    response.setBody(answer);

})(request, response);]]></operation_script>
        <operation_uri>/api/x_461903_vehicles/v3/vehicles/vehicle/{vin}</operation_uri>
        <produces>application/json</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/vehicle/{vin}</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-05-12 20:24:56</sys_created_on>
        <sys_id>dfc66bbe930e4210236b7bfdfaba10a1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Get Vehicle (v3)</sys_name>
        <sys_package display_value="Vehicles" source="x_461903_vehicles">3d3f7db293064210236b7bfdfaba10e2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Vehicles">3d3f7db293064210236b7bfdfaba10e2</sys_scope>
        <sys_update_name>sys_ws_operation_dfc66bbe930e4210236b7bfdfaba10a1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-05-12 20:24:56</sys_updated_on>
        <web_service_definition display_value="Vehicles">f5e0263693c64210236b7bfdfaba101f</web_service_definition>
        <web_service_version display_value="v3">dfc623be930e4210236b7bfdfaba1038</web_service_version>
    </sys_ws_operation>
</record_update>
